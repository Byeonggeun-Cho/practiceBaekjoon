import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Date;

public class Main{

	public static void main(String[] args){
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        try {
        	// 에라토스테네스의 체
        	// 1부터 n까지 쭉 나열한 다음(...) 2의 배수, 3의 배수, 5의 배수... 를 제외
        	// 단, 기준수(2,3,5,7, ...)를 제외한 배수 제외
            // n보다 작은 합성수 m은 sqrt(n)보다 작은 수의 배수만 확인
            // -> sqrt(n) 이하의 수의 배수만 제외 처리
        	
        	// 1. 입력값 사이의 값이 차례대로 넣어진 배열 생성
        	// 2. 배열 내 배수 제외
        	
        	// 입력값
        	String[] str = br.readLine().trim().split(" ");
        	
        	int first = Integer.parseInt(str[0]);
        	int second = Integer.parseInt(str[1]);
        	
        	// 두 수 모두 포함해야 하므로 +1자리의 배열 생성
        	int[] arr = new int[second];
        	
        	// 두 수 사이의 값을 차례대로 배열에 입력
        	for(int i=0; i<second; i++) {
        		arr[i] = i+1;
        	}
        	
        	// 값이 1일때 제외
        	// 소수가 아닌 경우 -1로 저장
        	arr[0] = -1;

        	// 나눌 값(분모)의 인덱스
        	// arr[idx]
        	// arr[0] = 1;
        	int idx = 0;
        	
        	// 인덱스
        	while((idx+1)*(idx+1) <= second) {
        		// 나누는 값(분자)의 인덱스
        		int j=0;
        		
        		// 연산을 수행할 값이 최대값보다 작은 동안
        		while(j<second) {
        			// 나눌 값의 소수 여부 확인
        			// 나눌 값이 소수가 아닌 경우 미실행
        			if(arr[idx] != -1) {
        				// 나누는 값이 나눌 값으로 나누어 떨어지는 경우
        				if((double)arr[j]/arr[idx] % 1 == 0) {
        					// 최초 기준수가 아닌 경우
        					if(arr[j] != arr[idx]){
        						// arr[j]는 소수가 아님을 표기
        						arr[j] = -1;
        					}
        				}
        			}
        			// 다음 값으로 이동
        			j++;
        		}
        		
        		// 나누는 값 변경
        		idx++;
        	}
        	
        	// 배열 내 숫자 중 소수가 아닌 숫자 출력
        	for(int i=first-1; i<arr.length; i++) {
        		if(arr[i] != -1) {
        			System.out.println(arr[i]);
        		}
        	}
        } catch(Exception e) {
        	e.printStackTrace();
        } finally {
        	try {
        		
        		br.close();
        	} catch(Exception e) {
        		e.printStackTrace();
        	}
        }
	}
}
