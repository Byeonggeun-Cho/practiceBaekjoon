
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main{

	public static void main(String[] args){
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        try {
        	// 입력값
        	int first = Integer.parseInt(br.readLine().trim());
        	int second = Integer.parseInt(br.readLine().trim());
        	
        	// 누적합
        	int sum = 0;
        	
        	// 최소값을 두 번째 값+1로 설정
        	// 소수가 없을 경우 second+1
        	int min = second+1;
        	
        	for(int i=first; i<=second; i++) {
        		
        		// 소수여부 확인
        		if( checkPrimeNum(i) ) {
        			// 누적합
        			sum += i;
        			
        			// 소수인 값 중 가장 작은 값을 저장
        			if(i < min) {
        				min = i;
        			}
        		}
        	}
        	
        	// 소수가 없는 경우 출력X
        	if(sum != 0) {
        		System.out.println(sum);
        	}
        	// min값이 초기값과 동일한 경우 -1 출력
        	System.out.println(min<=second?min:-1);
        	
        } catch(Exception e) {
        	e.printStackTrace();
        } finally {
        	try {
        		
        		br.close();
        	} catch(Exception e) {
        		e.printStackTrace();
        	}
        }
	}
	
	public static boolean checkPrimeNum(int num) {
		// 약수 카운트
		int cnt = 0;

		// 1은 소수에서 제외
		if(num == 1) {
			return false;
		} else {
			
			// num을 1 ~ num/2 사이의 정수로 나누어 소수 여부 확인 
			for(int i=1; i<=num/2; i++) {
				
				// 1. i로 나눈 '몫'이 정수인 경수 -> 약수: i, 몫
				// 2. i로 나눈 '목'이 실수인 경우 -> 자연수로 나누어 떨어지지 않음
				if(((double)num/i)%1 == 0) {
					cnt++;
				}
				
				// 1~num/2 범위 내에서 소수는 오직 1만을 약수로 갖는다 -> cnt == 1
				if(cnt>1) {
					return false;
				}
			}
		}
		
		return true;
	}
}
