import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

public class Main {
	public static void main(String[] args) {
		InputStream in = System.in;
		InputStreamReader isr = new InputStreamReader(in);
		BufferedReader br = new BufferedReader(isr);
		
		try {
			// 입력받을 문자열 수
			int num = Integer.parseInt(br.readLine().trim());

			// 그룹단어 카운트
			int cnt = 0;
			
			for(int i=0; i<num; i++) {
				// 그룹단어 여부 확인 함수 사용하여 카운팅
				cnt += checkGroupStr(br.readLine().trim());
			}
			
			System.out.println(cnt);
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				br.close();
				isr.close();
				in.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	// 그룹단어 여부 확인 후 맞으면 1, 아니면 0 반환
	public static int checkGroupStr(String str) {
		
		// 1. 문자열을 한 글자씩 배열에 저장
		// 2. 이전 내용과 비교하며 저장
		//	2.1. 직전 값과 다른 경우
		//		2.1.1. 배열의 처음부터 반복의 시작점 전까지 해당 값이 존재하는지 확인하여 없으면 저장
		//		2.1.2. 배열의 처음부터 반복의 시작점 전까지 해당 값이 존재하지는 확인하여 있으면 그룹문자 X -> return 0
		// 	2.2. 직전 값과 동일한 경우 pass
		// 3. 종료시점까지 도달하면 그룹문자 -> return 1
		
		// 문자 저장 배열
		// 배열의 크기: 최소 1 ~ 최대 문자열 길이
		char[] chArr = new char[str.length()];
		
		// 배열[0]에 초기값 저장
		chArr[0] = str.charAt(0);
		
		// 반복 문자의 시작 인덱스
		int repeatIdx = 0;
		
		for(int i=1; i<str.length(); i++) {
			
			// 비교문자와 반복 시작점의 문자 비교
			if(str.charAt(i) != chArr[repeatIdx]) {
				// 서로 다른 경우
				
				// 반복문자 시작점 변경
				repeatIdx = i;
				
				// 반복문자 시작점 전까지 동일한 값이 저장된적이 있는지 탐색 
				for(int j=0; j<repeatIdx; j++) {
					
					// 동일한 값이 저장된 이력이 있는 경우
					if(str.charAt(i) == chArr[j]) {
						// 0 반환
						return 0;
					// 동일한 값이 저장된 이력이 없는 경우
					} else {
						// 해당 인덱스 위치에 값 저장
						chArr[i] = str.charAt(i);
					}
				}
			} else {
				// 해당 인덱스 위치에 값 저장
				chArr[i] = str.charAt(i);
			}
		}
		
		return 1;
	}
}
