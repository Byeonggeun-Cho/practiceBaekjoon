
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Main {
	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		try {
			// 절대값 범위 상수
			final int RANGE = 4000;

			int num = Integer.parseInt(br.readLine().trim());
			
			int[] arr = new int[num];
			
			// 최대값
			int max = -RANGE;
			
			// 최소값
			int min = RANGE;
			
			// 누적합
			int sum = 0;
			
			// 배열에 값 저장
			for(int i=0; i<num; i++) {
				arr[i] = Integer.parseInt(br.readLine().trim());
				
				max = Math.max(max, arr[i]);
				min = Math.min(min, arr[i]);
				
				sum += arr[i];
			}
			
			// 오름차순 정렬
			
			// 정렬을 위한 임시변수
			// 누적 인덱스 배열
			int[] countArr = new int[RANGE*2 + 1];

			// 빈도 저장 배열
			for(int i=0; i<arr.length; i++) {
				countArr[arr[i] + RANGE]++;
			}
			
			// 누적하여 인덱스 시작위치 지정
			// 누적 인덱스 저장 배열
			// 깊은복사
			int[] tempArr = new int[countArr.length];
			
			for(int i=0; i<countArr.length; i++) {
				tempArr[i] = countArr[i];
			}
			
			for(int i=1; i<tempArr.length; i++) {
				tempArr[i] = tempArr[i-1] + tempArr[i];
			}
			
			int[] resultArr = new int[arr.length];
			
			for(int i=arr.length-1; i>=0; i--) {
				resultArr[tempArr[arr[i] + RANGE]-1] = arr[i];
				tempArr[arr[i] + RANGE]--;
			}
			
			arr = resultArr;

			// 산술평균
			bw.write(String.valueOf((int)(Math.round((double)sum/num))) + "\n");
			
			// 중앙값
			bw.write(String.valueOf(arr[num/2]) + "\n");
			
			// 최빈값
			int modeVal = 0;
			// 입력값이 1개인 경우
			if(num == 1) {
				modeVal = arr[0];
			// 입력값이 여러개인 경우
			} else {
				// 최대 빈도값
				int maxMode = -RANGE;
				
				// 최대 빈도값의 수
				int maxModeCnt = 0;
				
				for(int i=0; i<countArr.length; i++) {
					maxMode = Math.max(maxMode, countArr[i]);
				}
				
				for(int i=0; i<countArr.length; i++) {
					if(maxMode == countArr[i]) {
						maxModeCnt ++;
					}
				}
				
				// 최대 빈도값을 갖는 수가 1개인 경우
				if(maxModeCnt == 1) {
					for(int i=0; i<countArr.length; i++) {
						if(maxMode == countArr[i]) {
							modeVal = i - RANGE;
							break;
						}
					}
					
				// 최대 빈도값을 갖는 수가 2개 이상인 경우
				} else {
					int cnt = 1;
					for(int i=0; i<countArr.length; i++) {
						if(maxMode == countArr[i]) {
							if(cnt >= 1) {
								cnt --;
								continue;
							} else {
								modeVal = i - RANGE;
								break;
							}
						}
					}
				}
			}
			
			bw.write(String.valueOf(modeVal) + "\n");
			
			// 범위
			bw.write( String.valueOf(max - min) + "\n");
			
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				bw.flush();
				bw.close();
				br.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}	
}
