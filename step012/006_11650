import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) {
		// Merge Sorting을 이용한 시간복잡도O(n^2) 미만의 정렬
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		try {
			int num = Integer.parseInt(br.readLine().trim());
			
			// 좌표값 저장을 위한 2차원 배열
			int[][] arr = new int[num][2];
			
			for(int i=0; i<arr.length; i++) {
				// StringTokenizer를 이용해 입력값 분리 후 저장.
				StringTokenizer st = new StringTokenizer(br.readLine().trim());
				
				arr[i][0] = Integer.parseInt(st.nextToken());
				arr[i][1] = Integer.parseInt(st.nextToken());
			}
			
			mergeSort(arr, 0, arr.length-1);
						
			for(int i=0; i<arr.length; i++) {
				bw.write(arr[i][0] + " " + arr[i][1] + "\n");
			}
			
			
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				bw.flush();
				bw.close();
				br.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}	
	
	public static void merge(int[][] arr, int left, int mid, int right){
		// [1] 전달받은 배열 arr을 mid를 기준으로 둘로 나눔
		// [2] 두 배열의 인덱스에 순차적으로 접근 후 값을 비교하여 더 작은 수를 새로운 배열에 저장

		// 정렬된 값을 저장할 배열
		int[][] resultArr = new int[right - left + 1][2];
		
		// 나뉜 배열 중 왼쪽 배열의 첫 인덱스 == leftIdx == left
		int leftIdx = left;
		// 나뉜 배열 중 오른쪽 배열의 첫 인덱스 == rightIdx == mid + 1
		int rightIdx = mid + 1;
		// 새로 저장할 배열의 첫 인덱스 == newIdx == left
		int newIdx = 0;
		
		// 나뉜 배열에서 요소를 가져올 수 있는 동안 수행
		while(leftIdx<=mid && rightIdx<= right) {
			// 첫 번째 값 비교
			// 왼쪽 배열의 값이 더 작은 경우
			if(arr[leftIdx][0] < arr[rightIdx][0]) {
				
				// 결과 배열에 왼쪽 배열의 요소 저장
				resultArr[newIdx][0] = arr[leftIdx][0];
				resultArr[newIdx][1] = arr[leftIdx][1];
				
				// 왼쪽 배열의 인덱스 증가 -> 다름 자리의 수를 비교
				leftIdx ++;
			
			// 두 배열의 첫 번째 값(x좌표)이 동일한 경우
			} else if(arr[leftIdx][0] == arr[rightIdx][0]) {
				// 두 배열의 두 번째 값(y좌표) 비교
				// 왼쪽 배열의 y좌표가 더 작은 경우
				if(arr[leftIdx][1] <= arr[rightIdx][1]) {
					// 결과 배열에 왼쪽 배열의 요소 저장
					resultArr[newIdx][0] = arr[leftIdx][0];
					resultArr[newIdx][1] = arr[leftIdx][1];
					
					// 왼쪽 배열의 인덱스 증가 -> 다름 자리의 수를 비교
					leftIdx ++;
				
				// 오른쪽 배열의 y좌표가 더 작은 경우
				} else {
					resultArr[newIdx][0] = arr[rightIdx][0];
					resultArr[newIdx][1] = arr[rightIdx][1];
					
					// 오른쪽 배열의 인덱스 증가 -> 다름 자리의 수를 비교
					rightIdx ++;
				}
			
			// 오른쪽 배열의 값이 더 작은 경우
			} else {
				resultArr[newIdx][0] = arr[rightIdx][0];
				resultArr[newIdx][1] = arr[rightIdx][1];
				
				// 오른쪽 배열의 인덱스 증가 -> 다름 자리의 수를 비교
				rightIdx ++;
			}
			
			// 결과 배열의 인덱스 증가 -> 다음 자리에 새로운 값 저장
			newIdx ++;
		}
		
		// 배열에 남아있는 수 정렬
		// 오른쪽 배열이 남아있는 경우 == 왼쪽 배열의 인덱스가 mid 초과인 경우
		if(leftIdx > mid) {
			for(int i=rightIdx; i<=right; i++) {
				resultArr[newIdx][0] = arr[i][0];
				resultArr[newIdx][1] = arr[i][1];
				
				newIdx++;
			}
			
		// 왼쪽 배열이 남아있는 경우	== 오른쪽 배열의 인덱스가 right 초과인 경우
		} else {
			for(int i=leftIdx; i<=mid; i++) {
				resultArr[newIdx][0] = arr[i][0];
				resultArr[newIdx][1] = arr[i][1];
				
				newIdx++;
			}
		}
		
		// 결과배열 복사
		// left ~ right까지
		for(int i=left; i<=right; i++) {
			arr[i][0] = resultArr[i-left][0];
			arr[i][1] = resultArr[i-left][1];
		}
		
	}
	
	public static void mergeSort(int[][] arr, int left, int right) {
		// java에서 배열과 객체는 Call by Reference와 같이 동작
		int mid;
		
		if(left<right) {
			mid = (left + right) / 2;
			mergeSort(arr, left, mid);
			mergeSort(arr, mid+1, right);
			merge(arr, left, mid, right);
		}
		
	}
}
