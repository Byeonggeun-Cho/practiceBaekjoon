import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main{

	public static void main(String[] args){
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        try {
        	// 입력횟수
        	int num = Integer.parseInt(br.readLine().trim());
        	
        	// 반복
        	for(int i=0; i<num; i++) {
        		String[] str = br.readLine().trim().split(" ");
        		
        		// 시작점
        		int start = Integer.parseInt(str[0]);
        		
        		// 도착점
        		int end = Integer.parseInt(str[1]);
        		
        		// 함수 호출
        		System.out.println(calcEngine(start, end));
        	}
        	
        } catch(Exception e) {
        	e.printStackTrace();
        } finally {
        	try {
        		
        		br.close();
        	} catch(Exception e) {
        		e.printStackTrace();
        	}
        }
	}
	
	public static int calcEngine(int start, int end) {
		// 거리	횟수		이동값
		/// 1	1		1
		
		// 2	2		1, 1
		
		// 3	3		1, 1, 1
		/// 4	3		1, 2, 1
		
		// 5	4		1, 2, 1, 1
		// 6	4		1, 2, 2, 1
		
		// 7	5		1, 2, 2, 1, 1
		// 8	5		1, 2, 2, 2, 1
		/// 9	5		1, 2, 3, 2, 1
		
		// 10	6		1, 2, 3, 2, 1, 1
		// 11	6		1, 2, 3, 2, 2, 1
		// 12	6		1, 2, 3, 3, 2, 1
		
		// 13	7		1, 2, 3, 3, 2, 1, 1
		// 14	7		1, 2, 3, 3, 2, 2, 1
		// 15	7		1, 2, 3, 3, 3, 2, 1
		/// 16	7		1, 2, 3, 4, 3, 2, 1
		
		// 17	8		1, 2, 3, 4, 3, 2, 1, 1
		// 18	8		1, 2, 3, 4, 3, 2, 2, 1
		// 19	8		1, 2, 3, 4, 3, 3, 2, 1
		// 20	8		1, 2, 3, 4, 4, 3, 2, 1
		
		// 21	9		1, 2, 3, 4, 4, 3, 2, 1, 1
		// 22	9		1, 2, 3, 4, 4, 3, 2, 2, 1
		// 23	9		1, 2, 3, 4, 4, 3, 3, 2, 1
		// 24	9		1, 2, 3, 4, 4, 4, 3, 2, 1
		/// 25	9		1, 2, 3, 4, 5, 4, 3, 2, 1
		
		// 26	10		1, 2, 3, 4, 5, 4, 3, 2, 1, 1
		
		// 거리가 n^2일 때: 2*n-1 회
		// 거리가 n^2이 아닐 때
		//	1. 거리 >= (n.5)^2 : 2*n-1
		//  2. 거리 <  (n.5)^2 : 2*n
		
		// 장치 작동 횟수 카운트
		int cnt = 0;
		
		// 이동거리
		int distance = end - start;
		
		double disRoot = Math.sqrt(distance);
		
		if(disRoot % 1 == 0) {
			cnt = 2*(int)disRoot - 1;
		} else {
			if(disRoot - Math.floor(disRoot) >= 0.5) {
				cnt = 2*(int)Math.ceil(disRoot) -1;
			} else {
				cnt = 2*(int)Math.floor(disRoot);
			}
		}
		return cnt;
	}
}
