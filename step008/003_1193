import java.io.BufferedReader;
import java.io.InputStreamReader;

public class test01 {
    public static void main(String[] args){
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	
    	try {
    		// 규칙 찾기
    		// x:	1   2 1 / 1 2 3   4 3 2 1 / 1 2 3 4 5   6 5 4 3 2 1 / ...
    		// y:	1 / 1 2   3 2 1 / 1 2 3 4   5 4 3 2 1 / 1 2 3 4 5 6 ...
    		
    		// 그룹 내 개수
    		//   3    7    11    15 ... 
    		// 1    5   9     13    ... 
    		
    		// 중심 수
    		//   2   4   6   8 ... 2n
    		// 1   3   5   7   ... 2n-1
    		
    		// 찾으려는 순번
    		int num = Integer.parseInt(br.readLine().trim());

    		System.out.println(patternRule(num, 1) + "/" + patternRule(num, 2));
    		
    	} catch(Exception e) {
    		e.printStackTrace();
    	} finally {
    		try {
    			br.close();
    		} catch(Exception e) {
    			e.printStackTrace();
    		}
    	}
    }

    // num을 중심값으로 갖는 거울 패턴(1, / 1, 2, 1, / 1, 2, 3, 2, 1, ...) 배열 만들기
    public static int[] patternNum(int num) {
    	
    	// num을 중심으로 홀수개의 배열값 생성
    	int[] arr = new int[num*2-1];
    	
    	// 배열 개수 카운트
    	int cnt = 0;
    	
    	// 중심값에 도달했을 경우 다시 작아지도록 설정
    	int checkPoint = 1;
    	
    	for(int i=0; i<num*2-1; i++) {
    		
    		if(cnt == num) {
    			checkPoint = -1;
    		}
    		
			cnt += checkPoint;
			
			arr[i] = cnt;
    	}

    	return arr;
    }
    
    // x배열의 수 반환 startNum = 1 or 2
    public static int patternRule(int num, int startNum) {
    	
    	// num 길이의 배열 생성
    	int[] arr = new int[num];
    	
    	// 배열 인덱스
    	int idx = 0;
    	
    	// 중심값
    	int middleValue = startNum;

    	// 그룹 개수만큼 패턴 가져오기 실행
    	while(idx<num) {
    		// 패턴 가져오기
    		int[] pArr = patternNum(middleValue);
    		
    		// 그룹 배열의 값을 순서대로 불러와 전체 배열에 차례대로 저장
    		for(int i=0; i<pArr.length; i++) {
    			
    			// 순번값만큼의 값이 배열에 저장된 경우 배열값 입력 종료
    			if(idx == num) {
    				break;
    			} else {
    				arr[idx] = pArr[i];
    				idx++;
    			}
    		}
    		
    		middleValue += 2;
    	}

    	return arr[num-1];
    }
}
